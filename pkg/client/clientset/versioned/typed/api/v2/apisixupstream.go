// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by client-gen. DO NOT EDIT.

package v2

import (
	"context"

	v2 "github.com/apache/apisix-ingress-controller/api/v2"
	scheme "github.com/apache/apisix-ingress-controller/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ApisixUpstreamsGetter has a method to return a ApisixUpstreamInterface.
// A group's client should implement this interface.
type ApisixUpstreamsGetter interface {
	ApisixUpstreams(namespace string) ApisixUpstreamInterface
}

// ApisixUpstreamInterface has methods to work with ApisixUpstream resources.
type ApisixUpstreamInterface interface {
	Create(ctx context.Context, apisixUpstream *v2.ApisixUpstream, opts v1.CreateOptions) (*v2.ApisixUpstream, error)
	Update(ctx context.Context, apisixUpstream *v2.ApisixUpstream, opts v1.UpdateOptions) (*v2.ApisixUpstream, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, apisixUpstream *v2.ApisixUpstream, opts v1.UpdateOptions) (*v2.ApisixUpstream, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v2.ApisixUpstream, error)
	List(ctx context.Context, opts v1.ListOptions) (*v2.ApisixUpstreamList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v2.ApisixUpstream, err error)
	ApisixUpstreamExpansion
}

// apisixUpstreams implements ApisixUpstreamInterface
type apisixUpstreams struct {
	*gentype.ClientWithList[*v2.ApisixUpstream, *v2.ApisixUpstreamList]
}

// newApisixUpstreams returns a ApisixUpstreams
func newApisixUpstreams(c *ApisixV2Client, namespace string) *apisixUpstreams {
	return &apisixUpstreams{
		gentype.NewClientWithList[*v2.ApisixUpstream, *v2.ApisixUpstreamList](
			"apisixupstreams",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v2.ApisixUpstream { return &v2.ApisixUpstream{} },
			func() *v2.ApisixUpstreamList { return &v2.ApisixUpstreamList{} }),
	}
}
