// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v2 "github.com/apache/apisix-ingress-controller/api/v2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeApisixGlobalRules implements ApisixGlobalRuleInterface
type FakeApisixGlobalRules struct {
	Fake *FakeApisixV2
	ns   string
}

var apisixglobalrulesResource = v2.SchemeGroupVersion.WithResource("apisixglobalrules")

var apisixglobalrulesKind = v2.SchemeGroupVersion.WithKind("ApisixGlobalRule")

// Get takes name of the apisixGlobalRule, and returns the corresponding apisixGlobalRule object, and an error if there is any.
func (c *FakeApisixGlobalRules) Get(ctx context.Context, name string, options v1.GetOptions) (result *v2.ApisixGlobalRule, err error) {
	emptyResult := &v2.ApisixGlobalRule{}
	obj, err := c.Fake.
		Invokes(testing.NewGetActionWithOptions(apisixglobalrulesResource, c.ns, name, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v2.ApisixGlobalRule), err
}

// List takes label and field selectors, and returns the list of ApisixGlobalRules that match those selectors.
func (c *FakeApisixGlobalRules) List(ctx context.Context, opts v1.ListOptions) (result *v2.ApisixGlobalRuleList, err error) {
	emptyResult := &v2.ApisixGlobalRuleList{}
	obj, err := c.Fake.
		Invokes(testing.NewListActionWithOptions(apisixglobalrulesResource, apisixglobalrulesKind, c.ns, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v2.ApisixGlobalRuleList{ListMeta: obj.(*v2.ApisixGlobalRuleList).ListMeta}
	for _, item := range obj.(*v2.ApisixGlobalRuleList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested apisixGlobalRules.
func (c *FakeApisixGlobalRules) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchActionWithOptions(apisixglobalrulesResource, c.ns, opts))

}

// Create takes the representation of a apisixGlobalRule and creates it.  Returns the server's representation of the apisixGlobalRule, and an error, if there is any.
func (c *FakeApisixGlobalRules) Create(ctx context.Context, apisixGlobalRule *v2.ApisixGlobalRule, opts v1.CreateOptions) (result *v2.ApisixGlobalRule, err error) {
	emptyResult := &v2.ApisixGlobalRule{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateActionWithOptions(apisixglobalrulesResource, c.ns, apisixGlobalRule, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v2.ApisixGlobalRule), err
}

// Update takes the representation of a apisixGlobalRule and updates it. Returns the server's representation of the apisixGlobalRule, and an error, if there is any.
func (c *FakeApisixGlobalRules) Update(ctx context.Context, apisixGlobalRule *v2.ApisixGlobalRule, opts v1.UpdateOptions) (result *v2.ApisixGlobalRule, err error) {
	emptyResult := &v2.ApisixGlobalRule{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateActionWithOptions(apisixglobalrulesResource, c.ns, apisixGlobalRule, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v2.ApisixGlobalRule), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeApisixGlobalRules) UpdateStatus(ctx context.Context, apisixGlobalRule *v2.ApisixGlobalRule, opts v1.UpdateOptions) (result *v2.ApisixGlobalRule, err error) {
	emptyResult := &v2.ApisixGlobalRule{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceActionWithOptions(apisixglobalrulesResource, "status", c.ns, apisixGlobalRule, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v2.ApisixGlobalRule), err
}

// Delete takes name of the apisixGlobalRule and deletes it. Returns an error if one occurs.
func (c *FakeApisixGlobalRules) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(apisixglobalrulesResource, c.ns, name, opts), &v2.ApisixGlobalRule{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeApisixGlobalRules) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionActionWithOptions(apisixglobalrulesResource, c.ns, opts, listOpts)

	_, err := c.Fake.Invokes(action, &v2.ApisixGlobalRuleList{})
	return err
}

// Patch applies the patch and returns the patched apisixGlobalRule.
func (c *FakeApisixGlobalRules) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v2.ApisixGlobalRule, err error) {
	emptyResult := &v2.ApisixGlobalRule{}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceActionWithOptions(apisixglobalrulesResource, c.ns, name, pt, data, opts, subresources...), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v2.ApisixGlobalRule), err
}
